JETConcatenateTextAtEnd.js
1. Text Tool: ClickDrag to create a TypePath object. Type something.

2. Shift select any number of additional text objects.

3. Run the script. The text in the object you created in step 1 is added to the end of each of the other selected textFrame objects.

My most frequent use for this is to simply add a paragraph return at the end of several dozen individual text objects.

JETConcatenateTextAtStart.js
Same as above, except that it adds the text of the topmost object to the beginning of each of the others. My most frequent use for this is to add a Tab character at the start of each text object.

JET StackTopToBottom.js
1. Select a bunch of individual text objects, which are arranged vertically on the page in proper reading order, but which may or may not in fact be stacked in reading order.

2. Run the script. OK the two alerts which appear. (I left these in for my own purposes.) The stacking order of the objects are arranged such that the one highest on the page is rearmost; the one lowest on the page is frontmost. The text objects can now be copied all at once, and pasted into a new AreaType textFrame. They come in in correct reading order.

This script works on any kind of objects, not just text objects. To see, do this:

1. Rectangle Tool: Draw a rectangle. Solid fill, contrasting stroke.

2. AltDrag a copy of it toward the lower right a bit, but still overlapping the original somewhat. Type Ctrl-D (Transform Again) a dozen or so times.

3. Randomly select a few of the squares and bring to front; send to rear to goof up the stacking order.

4. Select them all and run the script. The objects restack in order, top to bottom.

If you look at the script you can probably figure out how to make versions of it that will stack bottom to top, left to right, right to left.

JETInsertName&Date.js
1. Text Tool: Click a text insertion cursor into any text object.

2. Run the script. The script inserts the document name, the date, and the time.

JETVariablesFTROU.js (Variables "for the rest of us").

1. Text Tool: Type some text like this:

DataSets [tab] Field01 [tab] Field02 [tab] Field03

Use any field names you want, but make them abide by the rules for variable names: no spaces; no special characters; start each with a letter, not a number.

2. Type a return at the end of the above. Then add the names of your data sets and values, also separated by tabs like so:

DataSets [tab] Field01 [tab] Field02 [tab] Field03 [return]
Set One [tab] Set1, field 1 [tab] Set 1, Field 2 [tab] Set 1, Field 3 [return]
Set Two [tab] Set2, field 1 [tab] Set 2, Field 2 [tab] Set 2, Field 3 [return]

...and so on. (You can paste a bunch of tab-delimeted text in from your spreadsheet or database program.)

3. Normal-Select the text object. Run the script. The script creates Variables in AI's Variables palette according to the first row of names you typed. It also creates bound text objects for each variable and stacks them in a pile at the upper left corner of the artboard. DataSets are created for each of the other paragraphs in the text object, with the values you entered.

4. Drag the bound text objects to where you want them on the page. Style them as desired.

5. Select different Data Sets from the popup menu in the Variables palette. The bound text objects update accordingly.

JETSerialNumbers.js
This script creates a range of serial numbers.

1. Text Tool: ClickDrag to create an AreaType object. Deselect this and then normal-select it.

2. Run the script. A prompt appears asking for a prefix. This lets you key in anything you want each number to start with, like "Part Number: "

3. A second prompt asks you how many numbers you need.

4. A third prompt asks you for the number you want to start counting from. (There is no accomodation for leading zeros. So if you want a bunch of numbers like 001, 002, 003, etc., enter 1001 as your first number. Then you can use Find/Replace to remove the 1s. (Find "[space]1", replace with "[space]".)

You can use the results as the text story in a bunch of threaded PathType objects. Each paragraph return makes the story jump to the next threaded PathType object. So you could use this to set up a press sheet gang-up of sequentially numbered tickets, for example.

It could also be used in conjunction with the VariablesFTROU script to create numerically-sequential data set names.

JET_RandomBaselineShift.jsx
This script alters the baseline shift of each character in a textFrame object, with a range specified by the user.

1. Normal-select a whole textFrame object. It can be a PointType, AreaType, or PathType object. Select the whole object, not a range of text.

2. Run the script. A prompt appears asking for the maximum amount of baseline shift. Default is 10 points.

3. The script baseline shifts the characters random amounts between the positive and negative of the value specified.

JET_SetCapHeight.jsx
This script lets the user set the size of a selected textRange by specifying a cap height.

1. Select a range of text characters.

2. Run the script. A prompt asks for the desired cap height, in points.

3. The script changes the size of the selected characters. Style of the selected text range is determined by that of the first character.

JET